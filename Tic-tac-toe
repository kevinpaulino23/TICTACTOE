#include <iostream>
#include <cstdlib> // for system("clear")
#include <ctime>   // for randomization
#include <vector>  // for storing available positions

using namespace std;

class TicTacToe {
private:
    char board[3][3];
    char mark;
    int turn;
    int won;
    int input;
    vector<int> availableMoves; // To store available positions for AI
    bool vsAI; // To determine if it's Player vs AI or Player vs Player

public:
    TicTacToe(bool isVsAI) : vsAI(isVsAI), board{{'1','2','3'}, {'4','5','6'}, {'7','8','9'}} {
        turn = 1;  // Player 1 starts (human)
        mark = 'O';
        won = 0;
        input = 0;
        srand(time(0)); // Initialize random seed for AI moves
        InitializeAvailableMoves();
    }

    int GetResult() {
        return won;
    }

    void Play() {
        for (int i = 0; i < 9; i++) {
            system("clear");
            PrintBoard();

            if (turn) {
                // Player 1's (human) turn
                Input();
                int validInput = AddMark();
                if (!validInput) {
                    i--;
                    continue;
                }
            } else if (vsAI) {
                // AI's turn (Player 2)
                AITurn();
            } else {
                // Player 2's turn (human)
                Input();
                int validInput = AddMark();
                if (!validInput) {
                    i--;
                    continue;
                }
            }

            Result(i);
            if (won != 0) break;

            turn = !turn;
        }
    }

    void Result(int i) {
        if (Check()) {
            system("clear");
            PrintBoard();
            if (turn) {
                cout << endl << "*** Player - You Won ***";
                won = 1;
                return;
            } else if (vsAI) {
                cout << endl << "*** AI - You Lost ***";
                won = 2;
                return;
            } else {
                cout << endl << "*** Player 2 - You Won ***";
                won = 2;
                return;
            }
        }
        if (i == 8) {
            system("clear");
            PrintBoard();
            cout << endl << "*** Match Draw ***";
            won = 3;
            return;
        }
        won = 0;
    }

    void Input() {
        cout << "Enter a number (1-9): ";
        cin >> input;
        while (cin.fail() || input < 1 || input > 9 || !IsAvailable(input)) {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << "Invalid input. Please re-enter: ";
            cin >> input;
        }
        mark = turn ? 'O' : 'X';
    }

    void PrintBoard() {
        cout << "-------------" << endl; // Top border
        PrintRow(0);
        cout << "-------------" << endl; // Middle border
        PrintRow(1);
        cout << "-------------" << endl; // Bottom border
        PrintRow(2);
        cout << "-------------" << endl; // Final border

        if (turn) cout << "O - Player 1: ";
        else if (vsAI) cout << "X - AI: ";
        else cout << "X - Player 2: ";
    }

    void PrintRow(int row) {
        for (int col = 0; col < 3; col++) {
            if (board[row][col] == 'O') {
                cout << "\033[34m" << " O " << "\033[0m"; // Blue for O
            } else if (board[row][col] == 'X') {
                cout << "\033[31m" << " X " << "\033[0m"; // Red for X
            } else {
                cout << " " << board[row][col] << " ";
            }

            if (col < 2) cout << "|";
        }
        cout << endl;
    }

    int AddMark() {
        for (int i = 0, k = 1; i < 3; i++) {
            for (int j = 0; j < 3; j++, k++) {
                if (k == input) {
                    if (board[i][j] != 'O' && board[i][j] != 'X') {
                        board[i][j] = mark;
                        RemoveFromAvailableMoves(input);
                        return 1;
                    } else return 0;
                }
            }
        }
        return 0;
    }

    int Check() {
        // rows
        for (int i = 0; i < 3; i++)
            if (board[i][0] == mark && board[i][1] == mark && board[i][2] == mark)
                return 1;

        // columns
        for (int i = 0; i < 3; i++)
            if (board[0][i] == mark && board[1][i] == mark && board[2][i] == mark)
                return 1;

        // diagonals
        if (board[0][0] == mark && board[1][1] == mark && board[2][2] == mark)
            return 1;
        if (board[0][2] == mark && board[1][1] == mark && board[2][0] == mark)
            return 1;

        return 0;
    }

    void Reset() {
        char val = '1';
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                board[i][j] = val++;
        turn = 1;
        mark = 'O';
        won = 0;
        input = 0;
        InitializeAvailableMoves();
    }

    void InitializeAvailableMoves() {
        availableMoves.clear();
        for (int i = 1; i <= 9; i++) {
            availableMoves.push_back(i);
        }
    }

    bool IsAvailable(int move) {
        for (int i = 0; i < availableMoves.size(); i++) {
            if (availableMoves[i] == move) return true;
        }
        return false;
    }

    void RemoveFromAvailableMoves(int move) {
        for (auto it = availableMoves.begin(); it != availableMoves.end(); ++it) {
            if (*it == move) {
                availableMoves.erase(it);
                break;
            }
        }
    }

    void AITurn() {
        // AI makes a random move
        int move = availableMoves[rand() % availableMoves.size()];
        board[(move - 1) / 3][(move - 1) % 3] = 'X'; // AI plays 'X'
        cout << "AI selects position " << move << endl;
        RemoveFromAvailableMoves(move);
    }
};

int main() {
    char mode;
    cout << "Choose game mode (P for Player vs Player, A for Player vs AI): ";
    cin >> mode;
    bool vsAI = (mode == 'A' || mode == 'a'); // Set game mode based on user input

    TicTacToe t(vsAI);
    char replay;
    do {
        t.Play();
        t.Reset();

        cout << endl << endl << "Do you want to play again (Y/N): ";
        cin >> replay;
    } while (replay == 'y' || replay == 'Y');

    return 0;
}
